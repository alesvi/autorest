/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import fixtures.http.AutoRestHttpInfrastructureTestService;
import fixtures.http.HttpFailures;
import fixtures.http.HttpSuccess;
import fixtures.http.HttpRedirects;
import fixtures.http.HttpClientFailures;
import fixtures.http.HttpServerFailures;
import fixtures.http.HttpRetrys;
import fixtures.http.MultipleResponses;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.AutoRestBaseUrl;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

/**
 * Initializes a new instance of the AutoRestHttpInfrastructureTestService class.
 */
public final class AutoRestHttpInfrastructureTestServiceImpl extends ServiceClient implements AutoRestHttpInfrastructureTestService {
    /**
     * The URL used as the base for all cloud service requests.
     */
    private final AutoRestBaseUrl baseUrl;

    /**
     * Gets the URL used as the base for all cloud service requests.
     *
     * @return The BaseUrl value.
     */
    public AutoRestBaseUrl getBaseUrl() {
        return this.baseUrl;
    }

    /**
     * Gets the HttpFailures object to access its operations.
     * @return the HttpFailures object.
     */
    public HttpFailures httpFailures() {
        return new HttpFailuresImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the HttpSuccess object to access its operations.
     * @return the HttpSuccess object.
     */
    public HttpSuccess httpSuccess() {
        return new HttpSuccessImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the HttpRedirects object to access its operations.
     * @return the HttpRedirects object.
     */
    public HttpRedirects httpRedirects() {
        return new HttpRedirectsImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the HttpClientFailures object to access its operations.
     * @return the HttpClientFailures object.
     */
    public HttpClientFailures httpClientFailures() {
        return new HttpClientFailuresImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the HttpServerFailures object to access its operations.
     * @return the HttpServerFailures object.
     */
    public HttpServerFailures httpServerFailures() {
        return new HttpServerFailuresImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the HttpRetrys object to access its operations.
     * @return the HttpRetrys object.
     */
    public HttpRetrys httpRetrys() {
        return new HttpRetrysImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Gets the MultipleResponses object to access its operations.
     * @return the MultipleResponses object.
     */
    public MultipleResponses multipleResponses() {
        return new MultipleResponsesImpl(this.retrofitBuilder.client(clientBuilder.build()).build(), this);
    }

    /**
     * Initializes an instance of AutoRestHttpInfrastructureTestService client.
     */
    public AutoRestHttpInfrastructureTestServiceImpl() {
        this("http://localhost");
    }

    /**
     * Initializes an instance of AutoRestHttpInfrastructureTestService client.
     *
     * @param baseUrl the base URL of the host
     */
    public AutoRestHttpInfrastructureTestServiceImpl(String baseUrl) {
        super();
        this.baseUrl = new AutoRestBaseUrl(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of AutoRestHttpInfrastructureTestService client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building up an {@link OkHttpClient}
     * @param retrofitBuilder the builder for building up a {@link Retrofit}
     */
    public AutoRestHttpInfrastructureTestServiceImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder retrofitBuilder) {
        super(clientBuilder, retrofitBuilder);
        this.baseUrl = new AutoRestBaseUrl(baseUrl);
        initialize();
    }

    @Override
    protected void initialize() {
        super.initialize();
        this.retrofitBuilder.baseUrl(baseUrl);
    }
}
